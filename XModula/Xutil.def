(* $XConsortium: Xutil.h,v 11.78 94/04/17 20:21:56 rws Exp $ *)
(* $XFree86: xc/lib/X11/Xutil.h,v 3.0 1996/12/09 11:49:36 dawes Exp $ *)

(***********************************************************

Copyright (c) 1987  X Consortium

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of the X Consortium shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from the X Consortium.


Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************)
(*
 *	Aug-1999:
 *	Translated to Modula-2 by Nicky.
 *      Use it at your own risks !
 *)


FOREIGN MODULE Xutil;

 FROM SYSTEM IMPORT BYTE, ADDRESS; (* Complete as necessary *)
 FROM Xglobal IMPORT CARD8, INT16, CARD16, INT, CARD, INT32, CARD32, SET32,
  BOOL, StringPtr, CHARPtr, INTPtr, CARD32Ptr, StringPtrPtr, Many;

(* #include <X11/X.h>: *)
 FROM X IMPORT XID, Mask, Atom, AtomPtr, VisualID, Time, Window, WindowPtr,
  Drawable, Font, Pixmap, Cursor, Colormap, ColormapPtr, GContext, KeySym,
  KeySymPtr, XFontSet, XIM, XIC, XOM, XOC;

(* #include <X11/Xlib.h>: (only used items) *)
 FROM Xlib IMPORT XPointer, Visual, VisualPtr, XRectangle, XRectanglePtr,
  GC, Display, DisplayPtr, Status, XKeyEvent, XKeyEventPtr, XPoint, XPointPtr;


(*
 * Bitmask returned by XParseGeometry().  Each bit tells if the corresponding
 * value (x, y, width, height) was found in the parsed string.
 *)
CONST
 NoValue =		0000H;
 XValue =		0001H;
 YValue =		0002H;
 WidthValue =		0004H;
 HeightValue =		0008H;
 AllValues =		000FH;
 XNegative =		0010H;
 YNegative  =		0020H;

(*
 * new version containing baseWidth, baseHeight, and winGravity fields;
 * used with WMNORMALHINTS.
 *)
TYPE
XSizeHintsPtr = POINTER TO XSizeHints;
XSizeHints = RECORD
	flags: SET32;	(* marks which fields in this structure are defined *)
	x, y: INT;		(* obsolete for new window mgrs, but clients *)
	width, height: INT;	(* should set so old wm's don't mess up *)
	minWidth, minHeight: INT;
	maxWidth, maxHeight: INT;
    	widthInc, heightInc: INT;
	minAspect, maxAspect: RECORD
		x: INT;
		y: INT;
	END;
	baseWidth, baseHeight: INT;		(* added by ICCCM version 1 *)
	winGravity: INT;			(* added by ICCCM version 1 *)
END;

(*
 * The next block of definitions are for window manager properties that
 * clients and applications use for communication.
 *)

(* flags argument in size hints *)
CONST
 USPosition =	SET32{0}; (* user specified x, y *)
 USSize =	SET32{1}; (* user specified width, height *)
 PPosition =	SET32{2}; (* program specified position *)
 PSize =	SET32{3}; (* program specified size *)
 PMinSize =	SET32{4}; (* program specified minimum size *)
 PMaxSize =	SET32{5}; (* program specified maximum size *)
 PResizeInc =	SET32{6}; (* program specified resize increments *)
 PAspect =	SET32{7}; (* program specified min and max aspect ratios *)
 PBaseSize =	SET32{8}; (* program specified base for incrementing *)
 PWinGravity =	SET32{9}; (* program specified window gravity *)

(* obsolete *)
 PAllHints = PPosition + PSize + PMinSize + PMaxSize + PResizeInc + PAspect;


TYPE
 XWMHintsPtr = POINTER TO  XWMHints;
 XWMHints = RECORD
	flags: SET32;	(* marks which fields in this structure are defined *)
	input: BOOL;	(* does this application rely on the window manager to
			get keyboard input? *)
	initialState: INT;	(* see below *)
	iconPixmap: Pixmap;	(* pixmap to be used as icon *)
	iconWindow: Window; 	(* window to be used as icon *)
	iconX, iconY: INT; 	(* initial position of icon *)
	iconMask: Pixmap;	(* icon mask bitmap *)
	windowGroup: XID;	(* id of related window group *)
	(* this structure may be extended in the future *)
END;

(* definition for flags of XWMHints *)

CONST
 InputHint = 		SET32{0};
 StateHint = 		SET32{1};
 IconPixmapHint =	SET32{2};
 IconWindowHint =	SET32{3};
 IconPositionHint = 	SET32{4};
 IconMaskHint =		SET32{5};
 WindowGroupHint =	SET32{6};
 AllHints = InputHint + StateHint + IconPixmapHint + IconWindowHint
          + IconPositionHint + IconMaskHint + WindowGroupHint;
 XUrgencyHint =		SET32{8};

(* definitions for initial window state *)
 WithdrawnState = 0;	(* for windows that are not mapped *)
 NormalState = 1;	(* most applications want to start this way *)
 IconicState = 3;	(* application wants to start as an icon *)

(*
 * Obsolete states no longer defined by ICCCM
 *)
 DontCareState = 0;	(* don't know or care *)
 ZoomState = 2;		(* application wants to start zoomed *)
 InactiveState = 4;	(* application believes it is seldom used; *)
			(* some wm's may put it on inactive menu *)


(*
 * new structure for manipulating TEXT properties; used with WMNAME,
 * WMICONNAME, WMCLIENTMACHINE, and WMCOMMAND.
 *)
TYPE
 XTextPropertyPtr = POINTER TO  XTextProperty;
 XTextProperty = RECORD
    value: CHARPtr;		(* same as Property routines *)
    encoding: Atom;			(* prop type *)
    format: INT;				(* prop data format: 8, 16, or 32 *)
    nitems: CARD32;		(* number of data items in value *)
END;

CONST
 XNoMemory = -1;
 XLocaleNotSupported = -2;
 XConverterNotFound = -3;

TYPE
XICCEncodingStyle = (
    XStringStyle,		(* STRING *)
    XCompoundTextStyle,		(* COMPOUNDTEXT *)
    XTextStyle,			(* text in owner's encoding (current locale)*)
    XStdICCTextStyle		(* STRING, else COMPOUNDTEXT *)
);

XIconSizePtr = POINTER TO XIconSize;
XIconSize = RECORD
	minWidth, minHeight: INT;
	maxWidth, maxHeight: INT;
	widthInc, heightInc: INT;
END;

XClassHintPtr = POINTER TO XClassHint;
XClassHint = RECORD
	resName: StringPtr;
	resClass: StringPtr;
END;


(*
 * Compose sequence status structure, used in calling XLookupString.
 *)
XComposeStatusPtr = POINTER TO XComposeStatus;
XComposeStatus = RECORD
    composePtr: XPointer;	(* state table pointer *)
    charsMatched: INT;		(* match state *)
END;

(*
 * opaque reference to Region data type
 *)
TYPE Region = ADDRESS;

(* Return values from XRectInRegion() *)

CONST
 RectangleOut = 0;
 RectangleIn = 1;
 RectanglePart = 2;


(*
 * Information used by the visual utility routines to find desired visual
 * type from the many visuals a display may support.
 *)

TYPE
XVisualInfoPtr = POINTER TO XVisualInfo;
XVisualInfo = RECORD
  visual: VisualPtr;
  visualid: VisualID;
  screen: INT;
  depth: INT;
  class: INT;
  redMask: CARD32;
  greenMask: CARD32;
  blueMask: CARD32;
  colormapSize: INT;
  bitsPerRgb: INT;
END;

CONST
 VisualNoMask =			0H;
 VisualIDMask  =		1H;
 VisualScreenMask =		2H;
 VisualDepthMask =		4H;
 VisualClassMask =		8H;
 VisualRedMaskMask =		10H;
 VisualGreenMaskMask =		20H;
 VisualBlueMaskMask =		40H;
 VisualColormapSizeMask =	80H;
 VisualBitsPerRGBMask =		100H;
 VisualAllMask =		1FFH;

(*
 * This defines a window manager property that clients may use to
 * share standard color maps of type RGBCOLORMAP:
 *)
TYPE
XStandardColormapPtr = POINTER TO XStandardColormap;
XStandardColormap = RECORD
	colormap: Colormap;
	redMax: CARD32;
	redMult: CARD32;
	greenMax: CARD32;
	greenMult: CARD32;
	blueMax: CARD32;
	blueMult: CARD32;
	basePixel: CARD32;
	visualid: VisualID;		(* added by ICCCM version 1 *)
	killid: XID;			(* added by ICCCM version 1 *)
END;

CONST
 ReleaseByFreeingColormap = 1;  (* for killid field above *)


(*
 * return codes for XReadBitmapFile and XWriteBitmapFile
 *)
 BitmapSuccess =	0;
 BitmapOpenFailed = 	1;
 BitmapFileInvalid = 	2;
 BitmapNoMemory	=	3;

(****************************************************************
 *
 * Context Management
 *
 ****************************************************************)


(* Associative lookup table return codes *)

 XCSUCCESS = 0;    (* No error. *)
 XCNOMEM =   1;    (* Out of memory *)
 XCNOENT =   2;    (* No entry in table *)

TYPE
 XContext = INT;


(* The following declarations are alphabetized. *)

PROCEDURE XAllocClassHint (
): XClassHintPtr;

PROCEDURE XAllocIconSize (
): XIconSizePtr;

PROCEDURE XAllocSizeHints (
): XSizeHintsPtr;

PROCEDURE XAllocStandardColormap (
): XStandardColormapPtr;

PROCEDURE XAllocWMHints (
): XWMHintsPtr;

PROCEDURE XClipBox(
    r: Region;
    VAR rect: XRectanglePtr
): INT;

PROCEDURE XCreateRegion(
): Region;

PROCEDURE XDefaultString(
): StringPtr;

PROCEDURE XDeleteContext(
    display: DisplayPtr;
    rid: XID;
    context: XContext
): INT;

PROCEDURE XDestroyRegion(
    r: Region
): INT;

PROCEDURE XEmptyRegion(
    r: Region
): INT;

PROCEDURE XEqualRegion(
    r1: Region;
    r2: Region
): INT;

PROCEDURE XFindContext(
    display: DisplayPtr;
    rid: XID;
    context: XContext;
    VAR data: XPointer
): INT;

PROCEDURE XGetClassHint(
    display: DisplayPtr;
    w: Window;
    VAR classHints: XClassHint
): Status;

PROCEDURE XGetIconSizes(
    display: DisplayPtr;
    w: Window;
    VAR sizeList: XIconSizePtr;
    VAR count: INT
): Status;

PROCEDURE XGetNormalHints(
    display: DisplayPtr;
    w: Window;
    VAR hints: XSizeHints
): Status;

PROCEDURE XGetRGBColormaps(
    display: DisplayPtr;
    w: Window;
    VAR stdcmap: XStandardColormapPtr;
    VAR count: INT;
    property: Atom
): Status;

PROCEDURE XGetSizeHints(
    display: DisplayPtr;
    w: Window;
    VAR hints: XSizeHints;
    property: Atom
): Status;

PROCEDURE XGetStandardColormap(
    display: DisplayPtr;
    w: Window;
    VAR colormap: XStandardColormap;
    property: Atom
): Status;

PROCEDURE XGetTextProperty(
    display: DisplayPtr;
    window: Window;
    VAR textProp: XTextProperty;
    property: Atom
): Status;

PROCEDURE XGetVisualInfo(
    display: DisplayPtr;
    vinfoMask: INT32;
    vinfoTemplate: XVisualInfoPtr;
    VAR nitems: INT
): XVisualInfoPtr;

PROCEDURE XGetWMClientMachine(
    display: DisplayPtr;
    w: Window;
    VAR textProp: XTextProperty
): Status;

PROCEDURE XGetWMHints(
    display: DisplayPtr;
    w: Window
): XWMHintsPtr;

PROCEDURE XGetWMIconName(
    display: DisplayPtr;
    w: Window;
    VAR textProp: XTextProperty
): Status;

PROCEDURE XGetWMName(
    display: DisplayPtr;
    w: Window;
    VAR textProp: XTextProperty
): Status;

PROCEDURE XGetWMNormalHints(
    display: DisplayPtr;
    w: Window;
    VAR hints: XSizeHints;
    VAR supplied: INT32
): Status;

PROCEDURE XGetWMSizeHints(
    display: DisplayPtr;
    w: Window;
    VAR hints: XSizeHints;
    VAR supplied: INT32;
    property: Atom
): Status;

PROCEDURE XGetZoomHints(
    display: DisplayPtr;
    w: Window;
    VAR zhints: XSizeHints
): Status;

PROCEDURE XIntersectRegion(
    sra: Region;
    srb: Region;
    VAR dr: Region
): INT;

PROCEDURE XConvertCase(
    sym: KeySym;
    lower: KeySym;
    upper: KeySymPtr
);

PROCEDURE XLookupString(
    eventStruct: XKeyEventPtr;
    VAR buffer: ARRAY OF CHAR;
    VAR keysym: KeySym;
    statusInOut: XComposeStatusPtr
): INT;

PROCEDURE XMatchVisualInfo(
    display: DisplayPtr;
    screen: INT;
    depth: INT;
    class: INT;
    VAR vinfo: XVisualInfo
): Status;

PROCEDURE XOffsetRegion(
    r: Region;
    dx: INT;
    dy: INT
): INT;

PROCEDURE XPointInRegion(
    r: Region;
    x: INT;
    y: INT
): BOOL;

PROCEDURE XPolygonRegion(
    points: XPointPtr;
    n: INT;
    fillRule: INT
): Region;

PROCEDURE XRectInRegion(
    r: Region;
    x: INT;
    y: INT;
    width: CARD;
    height: CARD
): INT;

PROCEDURE XSaveContext(
    display: DisplayPtr;
    rid: XID;
    context: XContext;
    data: StringPtr
): INT;

PROCEDURE XSetClassHint(
    display: DisplayPtr;
    w: Window;
    classHints: XClassHintPtr
): INT;

PROCEDURE XSetIconSizes(
    display: DisplayPtr;
    w: Window;
    sizeList: XIconSizePtr;
    count: INT
): INT;

PROCEDURE XSetNormalHints(
    display: DisplayPtr;
    w: Window;
    hints: XSizeHintsPtr
): INT;

PROCEDURE XSetRGBColormaps(
    display: DisplayPtr;
    w: Window;
    stdcmaps: XStandardColormapPtr;
    count: INT;
    property: Atom
);

PROCEDURE XSetSizeHints(
    display: DisplayPtr;
    w: Window;
    hints: XSizeHintsPtr;
    property: Atom
): INT;

PROCEDURE XSetStandardProperties(
    display: DisplayPtr;
    w: Window;
    windowName: StringPtr;
    iconName: StringPtr;
    iconPixmap: Pixmap;
    argv: StringPtrPtr;
    argc: INT;
    hints: XSizeHintsPtr
): INT;

PROCEDURE XSetTextProperty(
    display: DisplayPtr;
    w: Window;
    textProp: XTextPropertyPtr;
    property: Atom
);

PROCEDURE XSetWMClientMachine(
    display: DisplayPtr;
    w: Window;
    textProp: XTextPropertyPtr
);

PROCEDURE XSetWMHints(
    display: DisplayPtr;
    w: Window;
    wmHints: XWMHintsPtr
): INT;

PROCEDURE XSetWMIconName(
    display: DisplayPtr;
    w: Window;
    textProp: XTextPropertyPtr
);

PROCEDURE XSetWMName(
    display: DisplayPtr;
    w: Window;
    textProp: XTextPropertyPtr
);

PROCEDURE XSetWMNormalHints(
    display: DisplayPtr;
    w: Window;
    hints: XSizeHintsPtr
);

PROCEDURE XSetWMProperties(
    display: DisplayPtr;
    w: Window;
    windowName: XTextPropertyPtr;
    iconName: XTextPropertyPtr;
    argv: StringPtrPtr;
    argc: INT;
    normalHints: XSizeHintsPtr;
    wmHints: XWMHintsPtr;
    classHints: XClassHintPtr
);

PROCEDURE XmbSetWMProperties(
    display: DisplayPtr;
    w: Window;
    windowName: StringPtr;
    iconName: StringPtr;
    argv: StringPtrPtr;
    argc: INT;
    normalHints: XSizeHintsPtr;
    wmHints: XWMHintsPtr;
    classHints: XClassHintPtr
);

PROCEDURE XSetWMSizeHints(
    display: DisplayPtr;
    w: Window;
    hints: XSizeHintsPtr;
    property: Atom
);

PROCEDURE XSetRegion(
    display: DisplayPtr;
    gc: GC;
    r: Region
): INT;

PROCEDURE XSetStandardColormap(
    display: DisplayPtr;
    w: Window;
    colormap: XStandardColormapPtr;
    property: Atom
);

PROCEDURE XSetZoomHints(
    display: DisplayPtr;
    w: Window;
    zhints: XSizeHintsPtr
): INT;

PROCEDURE XShrinkRegion(
    r: Region;
    dx: INT;
    dy: INT
): INT;

PROCEDURE XStringListToTextProperty(
    list: StringPtrPtr;
    count: INT;
    VAR textProp: XTextProperty
): Status;

PROCEDURE XSubtractRegion(
    sra: Region;
    srb: Region;
    VAR dr: Region
): INT;

PROCEDURE XmbTextListToTextProperty(
    display: Display;
    list: StringPtrPtr;
    count: INT;
    style: XICCEncodingStyle;
    VAR textProp: XTextProperty
): INT;

PROCEDURE XwcTextListToTextProperty(
    display: DisplayPtr;
    list: ADDRESS;
    count: INT;
    style: XICCEncodingStyle;
    VAR textProp: XTextProperty
): INT;

PROCEDURE XwcFreeStringList(
    list: ADDRESS
);

PROCEDURE XTextPropertyToStringList(
    textProp: XTextPropertyPtr;
    VAR list: StringPtrPtr;
    VAR count: INT
): Status;

PROCEDURE XmbTextPropertyToTextList(
    display: DisplayPtr;
    textProp: XTextPropertyPtr;
    VAR list: StringPtrPtr;
    VAR count: INT
): INT;

PROCEDURE XwcTextPropertyToTextList(
    display: DisplayPtr;
    textProp: XTextPropertyPtr;
    VAR list: ADDRESS;
    VAR count: INT
): INT;

PROCEDURE XUnionRectWithRegion(
    rectangle: XRectanglePtr;
    srcRegion: Region;
    VAR destRegion: Region
): INT;

PROCEDURE XUnionRegion(
    sra: Region;
    srb: Region;
    drReturn: Region
): INT;

PROCEDURE XWMGeometry(
    display: Display;
    screenNumber: INT;
    userGeometry: StringPtr;
    defaultGeometry: StringPtr;
    borderWidth: CARD;
    hints: XSizeHintsPtr;
    VAR x: INT;
    VAR y: INT;
    VAR width: INT;
    VAR height: INT;
    VAR gravity: INT
): INT;

PROCEDURE XXorRegion(
    sra: Region;
    srb: Region;
    VAR dr: Region
): INT;

END Xutil.
