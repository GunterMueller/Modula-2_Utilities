DEFINITION MODULE XMacros;

 FROM SYSTEM IMPORT BYTE, ADDRESS, ADR;
 FROM Xglobal IMPORT CARD8, INT16, CARD16, INT, CARD, INT32, CARD32, SET32,
  BOOL, StringPtr;
 FROM X IMPORT Window, Colormap, KeySym;
 FROM Xlib IMPORT Display, DisplayPtr, Screen, ScreenPtr, GC, Visual, VisualPtr,
  XImage, XImagePtr;

(* String constants from X.h; uncomment if you need them *)
(*
CONST
 XNRequiredCharSet = "requiredCharSet";
 XNQueryOrientation = "queryOrientation";
 XNBaseFontName = "baseFontName";
 XNOMAutomatic = "omAutomatic";
 XNMissingCharSet = "missingCharSet";
 XNDefaultString = "defaultString";
 XNOrientation = "orientation";
 XNDirectionalDependentDrawing = "directionalDependentDrawing";
 XNContextualDrawing = "contextualDrawing";
 XNFontInfo = "fontInfo";

CONST
 XNVaNestedList = "XNVaNestedList";
 XNQueryInputStyle = "queryInputStyle";
 XNClientWindow = "clientWindow";
 XNInputStyle = "inputStyle";
 XNFocusWindow = "focusWindow";
 XNResourceName = "resourceName";
 XNResourceClass = "resourceClass";
 XNGeometryCallback = "geometryCallback";
 XNDestroyCallback = "destroyCallback";
 XNFilterEvents = "filterEvents";
 XNPreeditStartCallback = "preeditStartCallback";
 XNPreeditDoneCallback = "preeditDoneCallback";
 XNPreeditDrawCallback = "preeditDrawCallback";
 XNPreeditCaretCallback = "preeditCaretCallback";
 XNPreeditStateNotifyCallback = "preeditStateNotifyCallback";
 XNPreeditAttributes = "preeditAttributes";
 XNStatusStartCallback = "statusStartCallback";
 XNStatusDoneCallback = "statusDoneCallback";
 XNStatusDrawCallback = "statusDrawCallback";
 XNStatusAttributes = "statusAttributes";
 XNArea = "area";
 XNAreaNeeded = "areaNeeded";
 XNSpotLocation = "spotLocation";
 XNColormap = "colorMap";
 XNStdColormap = "stdColorMap";
 XNForeground = "foreground";
 XNBackground = "background";
 XNBackgroundPixmap = "backgroundPixmap";
 XNFontSet = "fontSet";
 XNLineSpace = "lineSpace";
 XNCursor = "cursor";

CONST
 XNQueryIMValuesList = "queryIMValuesList";
 XNQueryICValuesList = "queryICValuesList";
 XNVisiblePosition = "visiblePosition";
 XNR6PreeditCallback = "r6PreeditCallback";
 XNStringConversionCallback = "stringConversionCallback";
 XNStringConversion = "stringConversion";
 XNResetState = "resetState";
 XNHotKey = "hotKey";
 XNHotKeyState = "hotKeyState";
 XNPreeditState = "preeditState";
 XNSeparatorofNestedList = "separatorofNestedList";
*)

(* Inline C macros from Xlib.h, implemented by Modula-2 procedures *)
 PROCEDURE ConnectionNumber(dpy: DisplayPtr): INT;
 PROCEDURE RootWindow(dpy: DisplayPtr; scr: INT): Window;
 PROCEDURE DefaultScreen(dpy: DisplayPtr): INT;
 PROCEDURE DefaultRootWindow(dpy: DisplayPtr): Window;
 PROCEDURE DefaultVisual(dpy: DisplayPtr; scr: INT): VisualPtr;
 PROCEDURE DefaultGC(dpy: DisplayPtr; scr: INT): GC;
 PROCEDURE BlackPixel(dpy: DisplayPtr; scr: INT): CARD32;
 PROCEDURE WhitePixel(dpy: DisplayPtr; scr: INT): CARD32;
 CONST AllPlanes = -1;
 PROCEDURE QLength(dpy: DisplayPtr): INT;
 PROCEDURE DisplayWidth(dpy: DisplayPtr; scr: INT): INT;
 PROCEDURE DisplayHeight(dpy: DisplayPtr; scr: INT): INT;
 PROCEDURE DisplayWidthMM(dpy: DisplayPtr; scr: INT): INT;
 PROCEDURE DisplayHeightMM(dpy: DisplayPtr; scr: INT): INT;
 PROCEDURE DisplayPlanes(dpy: DisplayPtr; scr: INT): INT;
 PROCEDURE DisplayCells(dpy: DisplayPtr; scr: INT): INT;
 PROCEDURE ScreenCount(dpy: DisplayPtr): INT;
 PROCEDURE ServerVendor(dpy: DisplayPtr): StringPtr;
 PROCEDURE ProtocolVersion(dpy: DisplayPtr): INT;
 PROCEDURE ProtocolRevision(dpy: DisplayPtr): INT;
 PROCEDURE VendorRelease(dpy: DisplayPtr): INT;
 PROCEDURE DisplayString(dpy: DisplayPtr): StringPtr;
 PROCEDURE DefaultDepth(dpy: DisplayPtr; scr: INT): INT;
 PROCEDURE DefaultColormap(dpy: DisplayPtr; scr: INT): Colormap;
 PROCEDURE BitmapUnit(dpy: DisplayPtr): INT;
 PROCEDURE BitmapBitOrder(dpy: DisplayPtr): INT;
 PROCEDURE BitmapPad(dpy: DisplayPtr): INT;
 PROCEDURE ImageByteOrder(dpy: DisplayPtr): INT;
 PROCEDURE NextRequest(dpy: DisplayPtr): CARD32;
 PROCEDURE LastKnownRequestProcessed(dpy: DisplayPtr): CARD32;

(* macros for screen oriented applications (toolkit) *)
 PROCEDURE ScreenOfDisplay(dpy: DisplayPtr; scr: INT): ScreenPtr;
 PROCEDURE DefaultScreenOfDisplay(dpy: DisplayPtr): ScreenPtr;
 PROCEDURE DisplayOfScreen(s: ScreenPtr): DisplayPtr;
 PROCEDURE RootWindowOfScreen(s: ScreenPtr): Window;
 PROCEDURE BlackPixelOfScreen(s: ScreenPtr): CARD32;
 PROCEDURE WhitePixelOfScreen(s: ScreenPtr): CARD32;
 PROCEDURE DefaultColormapOfScreen(s: ScreenPtr): Colormap;
 PROCEDURE DefaultDepthOfScreen(s: ScreenPtr): INT;
 PROCEDURE DefaultGCOfScreen(s: ScreenPtr): GC;
 PROCEDURE DefaultVisualOfScreen(s: ScreenPtr): VisualPtr;
 PROCEDURE WidthOfScreen(s: ScreenPtr): INT;
 PROCEDURE HeightOfScreen(s: ScreenPtr): INT;
 PROCEDURE WidthMMOfScreen(s: ScreenPtr): INT;
 PROCEDURE HeightMMOfScreen(s: ScreenPtr): INT;
 PROCEDURE PlanesOfScreen(s: ScreenPtr): INT;
 PROCEDURE CellsOfScreen(s: ScreenPtr): INT;
 PROCEDURE MinCmapsOfScreen(s: ScreenPtr): INT;
 PROCEDURE MaxCmapsOfScreen(s: ScreenPtr): INT;
 PROCEDURE DoesSaveUnders(s: ScreenPtr): BOOL;
 PROCEDURE DoesBackingStore(s: ScreenPtr): INT;
 PROCEDURE EventMaskOfScreen(s: ScreenPtr): SET32;


(* Inline C macros from Xutil.h, implemented by Modula-2 procedures *)
 PROCEDURE XDestroyImage(ximage: XImagePtr): INT;
 PROCEDURE XGetPixel(ximage: XImagePtr; x, y: INT): CARD32;
 PROCEDURE XPutPixel(ximage: XImagePtr; x, y: INT; pixel: CARD32);
 PROCEDURE XSubImage(ximage: XImagePtr; x, y: INT; width, height: CARD): XImagePtr;
 PROCEDURE XAddPixel(ximage: XImagePtr; value: INT32);

(*
 * Keysym macros, used on Keysyms to test for classes of symbols
 *)
PROCEDURE IsKeypadKey(keysym: KeySym): BOOLEAN;
PROCEDURE IsPrivateKeypadKey(keysym: KeySym): BOOLEAN;
PROCEDURE IsCursorKey(keysym: KeySym): BOOLEAN;
PROCEDURE IsPFKey(keysym: KeySym): BOOLEAN;
PROCEDURE IsFunctionKey(keysym: KeySym): BOOLEAN;
PROCEDURE IsMiscFunctionKey(keysym: KeySym): BOOLEAN;
PROCEDURE IsModifierKey(keysym: KeySym): BOOLEAN;

END XMacros.
